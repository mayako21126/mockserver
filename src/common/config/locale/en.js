module.exports = {
    LN: 'english',
    languageSwitcher: 'Language Switcher：',
    info: 'Notices',
    goBack: 'Go Back',
    sidebar: {
        projectAdmin: 'Project Admin',
        projectList: 'Project List',
        addProject: 'Add Project',
        apiAdmin: 'API Admin',
        addApi: 'Add API',
        testApi: 'Test API',
        systemAdmin: 'System Admin',
        globalParamsSetting: 'Global Settings',
    },
    project: {
        index: {
            projectList: 'Project List',
            addProject: 'Add Project',
            projectName: 'Project Name',
            projectInterfacePrefix: 'API Prefix',
            proxyPrefix: 'Proxy Path',
            actions: 'Actions',
            delete: 'Delete',
            edit: 'Edit',
            details: 'Details',
            deleteTips: 'This action cannot be undone.Are you sure you want to delete this project?'
        },
        add: {
            editProject: "Edit Project",
            addProject: 'Add Project',
            projectName: 'Project Name',
            projectInterfacePrefix: 'API Prefix',
            prefixExclude: 'To exclude the following path，because these path  are occupied',
            projectProxyUrl: 'Project Proxy URL',
            format: 'Format',
            save: 'Save Project'
        },
        controller: {
            title: 'Project List',
            projectIsNotExist: 'Project dose not exist',
            deleteSuccess: 'Delete successful',
            deleteFail: 'Delete failed',
            idIsNotExist: 'ID dose not exist',
            projectNameIsExist: 'Project name is already exists',
            dataIsEmpty: 'Data is empty:click here to go to list',
            editSuccess: 'Update successful',
            editFail: 'Update failed',
            actionError: 'Operation failed',
            addSuccess: 'Add successful',
            returnProjectList: 'Go to Project List',
            editAgain: 'Edit',
            add: 'Add a new project'
        }
    },
    interface: {
        index: {
                searchPlaceHolder: 'API path or API name',
                search: 'Search',
                closeAllProxies: 'Close All Proxies',
                openAllProxies: 'Open All Proxies',
                openProxy: 'Open Proxy',
                closeProxy: 'Close Proxy',
                addInterface: 'Add API',
                projectName: 'Project Name',
                interfaceName: 'API Name',
                methodType: 'Method Type',
                interfaceUrl: 'API URL',
                againProxy: 'Proxy Switch',
                actions: 'Actions',
                closed: 'Closed',
                opened: 'Opened',
                delete: 'Delete',
                edit: 'Edit',
                clone: 'Clone',
                detail: 'Details',
                deleteTips: 'This action cannot be undone.Are you sure you want to delete this API?',
                openProxyTipsPrefix: 'If proxy is opened,the data from ',
                openProxyTipsPostfix: '<br> Cannot get data and get some error when the proxy URL does not exist.Error types: timeout or get error message ',
            },
            add: {
                addApi: 'Add API',
                editApi: 'Edit API',
                baseInfoTab: 'Basic Information',
                requestTab: 'Request Settings',
                responseTab: 'Responses Settings',
                proxyTab: 'Proxy Settings',
                testTab: 'Test Settings',
                save: 'Save API',
                paramValue: 'Parameter Value',
                paramSpecification: 'Parameter Description',
                baseInfo: {
                    belongTo: 'Belong To',
                    interfaceName: 'API Name',
                    placeholder: 'Enter API Name'
                },
                request: {
                    methodTypes: 'Method Types',
                    interfaceUrl: 'API URL',
                    proxyPrefixTips: 'All URL add prefix in this project',
                    urlFormat: 'Allow to Use RESTful format，e.g：a/:id/:name',
                    getParamsTitle: 'Get Parameters Description',
                    getParamsTip: 'Note： The get parameters description after [?] in  API URL',
                    headersParamsTitle: 'Request Headers Parameters Description',
                    headersParamsTips: '',
                    requestHeadersTitle: 'Request Headers Parameters',
                    requestHeadersTips: '',
                    urlMatchMode: 'URL Match Mode',
                    exactMatch: 'Exact Match',
                    exactMatchTips: 'If completely match the URL, the user is allowed to access this data',
                    incompleteMatch: 'Only match before [?]',
                    incompleteMatchTips: 'Note: the following URL can be match :website\/articles\/comment<br>website\/articles/comment?post_id=xx&rrr=vvv...',
                    requestBodyTitleDesc: 'Request Body Description',
                    requestBodyTitleTips: 'Parameters descriptions for post,put...，e.g:submitted forms post data',
                    requestBodyTitle: 'Request Body',
                },
                response: {
                    responseTitleDesc: 'Responses Data Description',
                    responseContentTitle: 'Responses Data',
                    responseStatusCode: 'Response Status Code',
                    responseStatusCodeTips: 'Default:200',
                    delayTime: 'Delay Time',
                    delayTimeTips: 'Unit:milliseconds，default:0',
                    mockjsTitle: 'mockjs',
                    open: 'Open',
                    close: 'Close',
                    mockjsSite: 'mockjs doc',
                    responseHeadersDesc: 'Responses Headers Description',
                    responseHeadersTitle: 'Responses Headers',
                    responseHeadersTips: '',
                },
                proxy: {
                    globalProxyUrl: 'Global Proxy URL',
                    projectProxyUrl: 'Project Proxy URL',
                    proxyUrl: 'Proxy URL',
                    openProxyTipsPrefix: 'If proxy is opened,the data from ',
                    openProxyTipsPostfix: '',
                    closeProxyTips: 'If proxy is closed，the data from mock data',
                    format: 'Format:http://192.168.1.2/',
                    proxySwitch: 'Proxy Switch',
                    close: 'Close',
                    open: 'Open'
                },
                test: {}
            },
            controller: {
                projectName: 'All APIs',
                APIList: 'API list',
                cloneError: 'Clone data dose not exist',
                deleteSuccess: 'Delete successful',
                idIsNotExist: 'ID dose not exist',
                dataIsEmpty: 'Data is empty:click here to go to API list',
                apiIsExist: 'Update error:API is already exists：',
                RESTfulApiIsExist: 'Update error:The same rule `RESTful` api already exists：',
                editSuccess: 'Update successful',
                editFail: 'Update failed',
                returnList: 'Go to API list',
                details: 'API details',
                actionError: 'Operation failed',
                addApiIsExist: 'Add failed:API is already exists：',
                addRESTfullApiIsExist: 'Add failed:The same rule `RESTful` api already exists：',
                addSuccess: 'Add successful',
                mockIdIsEmpty: 'Error:mock_id is empty',
                proxyIsEmpty: 'Error:is_proxy is empty',
                cloneFailed: 'Clone failed',
                editAgain: 'Edit'
            }
    },
    system: {
        systemSettings: 'Global Settings',
        globalProxyUrl: 'Global Proxy URL',
        globalProxyUrlTips: "It's necessary!!!.<br>What use does it have?<br>One：<br>Suppose：Global Proxy URL is [http://192.168.1.2] and this API(/api/dddd) dose not created in mock-sever,the system will send to [http://192.168.1.2/api/dddd],and return data,if [http://192.168.1.2/api/dddd] dose not exist,return error message<br>Two:if proxy is opened,it's used switch between mock-data and real data。<br>Suppose：Global Proxy URL is [http://192.168.1.2] and API is [/api/a/b]，the API will get data from  mock-data,when proxy is closed，but the API will get data from [http://192.168.1.2/api/a/b],when proxy is opened",
        format: 'Format:http://192.168.1.2',
        ProxyHeaders: 'Proxy Headers',
        BlackList: 'Blacklist',
        BlackListPlaceHolder: 'Blacklist，one per row',
        BlackListDesc: "1.These headers will not send to proxy URL,when proxy is opened and blacklist is selected.<br>2.If blacklist is empty and selected，it's default:host and accept-encoding，<br>because：API will get error,when host !== proxy URL's domain<br>accept-encoding: the chinese characters often garbled",
        WhiteList: 'Whitelist',
        WhiteListPlaceHolder: 'Whitelist，one per row',
        WhiteListDesc: 'These headers will only send to proxy URL,when proxy is opened and blacklist is selected.',
        save: 'Save Settings',
        controller: {
            dataIsEmpty: 'Error: post parameters is empty',
            updateSuccess: 'update successful',
            updateFailed: 'Error: operation failed',
            langIsEmpty: 'Error: parameter:lang is empty',
            hostIsEmpty: 'Error： Host is empty',
            portIsEmpty: 'Error： port is empty',
            databaseIsEmpty: 'Error：database is empty',
            userIsEmpty: 'Error：user is empty',
            editAgain: 'Edit again'
        },
        init: {
            initDataBase: 'Initialize Database',
            database: 'database',
            user: 'user',
            password: 'password',
            start: 'start'
        }
    },
    api: {
        multipleInterfaceError: 'API URL is repetitive',
        headerFormatError: 'Responses headers format is error',
        proxyIsEmptyError: "Couldn't get proxy URL",
        globalProxyIsEmptyError: "Couldn't get global proxy URL",
        getProxyDataError: 'Get data is failed,API dose not exist or parameters are error,may be you should send some parameters to proxy URL'
    }
}